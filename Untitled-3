############################################################################################################
#                                        Adobe Acrobat Installation                                        #
#                                                                                                          #
############################################################################################################
#region Acrobat Installation
# Define the URL for the latest Adobe Acrobat Reader DC
$URL = "https://ardownload2.adobe.com/pub/adobe/reader/win/AcrobatDC/latest/AcroRdrDC_en_US.exe"
$AcroFilePath = "C:\temp\Reader_en_install.exe"
$ErrorActionPreference = 'SilentlyContinue'
$WarningPreference = 'SilentlyContinue'
$TempFolder = "C:\temp"
$LogFile = "$TempFolder\baseline.log"

Set-ExecutionPolicy RemoteSigned -Force *> $null

function Write-Delayed {
    param(
        [string]$Text, 
        [switch]$NewLine = $true,
        [System.ConsoleColor]$Color = [System.ConsoleColor]::White
    )
    $currentColor = [Console]::ForegroundColor
    [Console]::ForegroundColor = $Color
    foreach ($Char in $Text.ToCharArray()) {
        [Console]::Write("$Char")
        Start-Sleep -Milliseconds 25
    }
    if ($NewLine) {
        [Console]::WriteLine()
    }
    [Console]::ForegroundColor = $currentColor
}

function Write-Log {
    param ([string]$Message)
    Add-Content -Path $LogFile -Value "$(Get-Date) - $Message"
}

function Write-TaskComplete {
    [Console]::ForegroundColor = [System.ConsoleColor]::Green
    [Console]::Write(" done.")
    [Console]::ResetColor()
    [Console]::WriteLine()
}

function Write-TaskFailed {
    [Console]::ForegroundColor = [System.ConsoleColor]::Red
    [Console]::Write(" failed.")
    [Console]::ResetColor()
    [Console]::WriteLine()
}

function Show-SpinningWait {
    param (
        [Parameter(Mandatory = $true)]
        [ScriptBlock]$ScriptBlock,
        [Parameter(Mandatory = $true)]
        [string]$Message,
        [string]$DoneMessage = "done."
    )
    
    Write-Delayed "$Message" -NewLine:$false
    $spinner = @('/', '-', '\', '|')
    $spinnerIndex = 0
    $jobName = [Guid]::NewGuid().ToString()
    
    # Start the script block as a job
    $job = Start-Job -Name $jobName -ScriptBlock $ScriptBlock
    
    # Display spinner while job is running
    while ($job.State -eq 'Running') {
        [Console]::Write($spinner[$spinnerIndex])
        Start-Sleep -Milliseconds 100
        [Console]::SetCursorPosition([Console]::CursorLeft - 1, [Console]::CursorTop)
        $spinnerIndex = ($spinnerIndex + 1) % $spinner.Length
    }
    
    # Get the job result
    $result = Receive-Job -Name $jobName
    Remove-Job -Name $jobName
    
    # Replace spinner with done message
    [Console]::ForegroundColor = [System.ConsoleColor]::Green
    [Console]::Write($DoneMessage)
    [Console]::ResetColor()
    [Console]::WriteLine()
    
    return $result
}

# Download the latest Acrobat Reader installer
Write-Delayed "Downloading Adobe Acrobat Reader DC..." -NewLine:$false
try {
    $ProgressPreference = 'SilentlyContinue'
    Invoke-WebRequest -Uri $URL -OutFile $AcroFilePath -UseBasicParsing -ErrorAction Stop
    $ProgressPreference = 'Continue'
    
    # Verify the download was successful
    if (Test-Path $AcroFilePath) {
        $fileInfo = Get-Item $AcroFilePath
        if ($fileInfo.Length -gt 1MB) {
            Write-TaskComplete
            Write-Log "Adobe Acrobat Reader DC downloaded successfully (Size: $([Math]::Round($fileInfo.Length/1MB, 2)) MB)"
            
            # Use the spinning indicator function for Adobe installation
            Show-SpinningWait -Message "Installing Adobe Acrobat Reader DC..." -ScriptBlock {
                try {
                    # Start the silent installation of Acrobat Reader
                    # EULA=1 accepts EULA, ALLUSERS=1 installs for all users, REMOVEOLDVERSION=1 removes older versions
                    $installArgs = "/sAll /rs /rps /msi /norestart /quiet EULA_ACCEPT=YES ENABLE_CHROMEEXT=0 DISABLE_BROWSER_INTEGRATION=1 ENABLE_OPTIMIZATION=YES INSTALL_UPDATES=1"
                    $process = Start-Process -FilePath $AcroFilePath -ArgumentList $installArgs -NoNewWindow -PassThru
                    
                    # Wait for the process to start and get its ID
                    Start-Sleep -Seconds 2
                    $parentPID = $process.Id
                    
                    # Monitor for msiexec processes, which indicate the actual installation
                    do {
                        Start-Sleep -Seconds 5
                        $msiexecProcess = Get-Process -Name msiexec -ErrorAction SilentlyContinue
                        
                        # Also check if the parent process is still running
                        try {
                            $parentProcess = Get-Process -Id $parentPID -ErrorAction SilentlyContinue
                        } catch {
                            $parentProcess = $null
                        }
                        
                    } while ($msiexecProcess -or $parentProcess)
                    
                    # Wait a bit more to ensure all processes finish
                    Start-Sleep -Seconds 5
                    
                    # Verify installation by checking if Acrobat Reader is installed
                    $readerInstalled = Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*, 
                                                        HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* | 
                                      Where-Object { $_.DisplayName -like "*Adobe Acrobat Reader*" -or $_.DisplayName -like "*Adobe Acrobat DC*" }
                    
                    if ($readerInstalled) {
                        Write-Log "Adobe Acrobat Reader DC installed successfully: $($readerInstalled.DisplayName)"
                        return $true
                    } else {
                        Write-Log "Adobe Acrobat Reader DC installation verification failed"
                        return $false
                    }
                }
                catch {
                    Write-Log "Error during Adobe Acrobat Reader DC installation: $($_.Exception.Message)"
                    return $false
                }
                finally {
                    # Clean up - kill any remaining Reader installation processes
                    Get-Process -Name "AcroRdrDC*", "Acrobat Update*", "Adobe Update*" -ErrorAction SilentlyContinue | 
                        Stop-Process -Force -ErrorAction SilentlyContinue
                }
            } | Out-Null
            
            # Clean up the installer file
            if (Test-Path $AcroFilePath) {
                Remove-Item -Path $AcroFilePath -Force -ErrorAction SilentlyContinue
                Write-Log "Adobe Acrobat Reader DC installer file removed"
            }
        } else {
            Write-TaskFailed
            Write-Log "Adobe Acrobat Reader DC download appears corrupt (Size: $([Math]::Round($fileInfo.Length/1KB, 2)) KB)"
            Remove-Item -Path $AcroFilePath -Force -ErrorAction SilentlyContinue
        }
    } else {
        Write-TaskFailed
        Write-Log "Adobe Acrobat Reader DC download failed - file not found"
    }
}
catch {
    Write-TaskFailed
    Write-Log "Failed to download Adobe Acrobat Reader DC: $($_.Exception.Message)"
}
#endregion Acrobat Installation 